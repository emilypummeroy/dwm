--- config.def.h	2023-02-24 14:36:13.221482089 +1100
+++ config.h	2023-02-24 17:41:04.877194645 +1100
@@ -1,25 +1,26 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int borderpx  = 2;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
-static const char urgcolor[]        = "#de3d2f";
-static const unsigned int baralpha = 0xd0;
-static const unsigned int borderalpha = OPAQUE;
+static const char *fonts[]          = { "monospace:size=12" };
+static const char dmenufont[]       = "monospace:size=12";
+static const char col_norm_bg[]     = "#0f261f"; // 160 60 15
+static const char col_norm_fg[]     = "#868f8c"; // 160 6 56
+static const char col_norm_border[] = "#24332e"; // 160 30 20
+static const char col_sel_bg[]      = "#185e41"; // 155 75 37
+static const char col_sel_fg[]      = "#e0d0bf"; // 30 15 88
+static const char col_sel_border[]  = "#00d990"; // 160 100 85
+static const char col_urg[]         = "#de3d2f"; // 5 79 87
+static const unsigned int baralpha = 0x88;
+static const unsigned int borderalpha = 0x88;
 static const char *colors[][3]      = {
-	/*               fg          bg          border        */
-	[SchemeNorm] = { col_gray3,  col_gray1,  col_gray2      },
-	[SchemeSel]  = { col_gray4,  col_cyan,   col_cyan       },
-	[SchemeUrg]  = { selfgcolor, urgcolor,   urgcolor       },
+	/*               fg         bg         border   */
+	[SchemeNorm] = { col_norm_fg, col_norm_bg, col_norm_border },
+	[SchemeSel]  = { col_sel_fg,  col_sel_bg,  col_sel_border  },
+	[SchemeUrg]  = { col_sel_fg,  col_urg,     col_urg         },
 };
 static const unsigned int alphas[][3]      = {
 	/*               fg      bg        border     */
@@ -31,14 +32,48 @@
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
+#define TERMINAL_CLASS "Alacritty", NULL
+#define ZOOM_CLASS "zoom", "zoom"
+#define SCRATCH_TITLE "scratch"
+#define PROCS_TITLE "processes"
+#define FILES_TITLE "files"
+#define EDITOR_TITLE "kakoune"
+#define MUSIC_TITLE "music"
+#define MIXER_TITLE "mixer"
+#define NET_TITLE "network"
+#define DEV_TITLE "devices"
+#define BROWSER_CLASS "firefox", "Navigator"
+#define DASH_TAG (1 << 8)
+#define ORG_TAG (1 << 7)
+#define WORK_TAG (1 << 6)
+#define MAIN_TAGS ~(DASH_TAG | ORG_TAG | WORK_TAG)
+
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* class       instance      title                      tags mask     isfloating   monitor  dynamic*/
+	{ TERMINAL_CLASS,            SCRATCH_TITLE,             0,            1,           -1 },
+	{ TERMINAL_CLASS,            PROCS_TITLE,               0,            1,           -1 },
+	{ TERMINAL_CLASS,            FILES_TITLE,               0,            1,           -1 },
+	{ "Slack",     NULL,         NULL,                      1 << 1,       0,           -1 },
+	{ TERMINAL_CLASS,            EDITOR_TITLE,              0,            1,           -1 },
+	{ TERMINAL_CLASS,            MUSIC_TITLE,               DASH_TAG,     1,           -1 },
+	{ TERMINAL_CLASS,            MIXER_TITLE,               DASH_TAG,     1,           -1 },
+	{ TERMINAL_CLASS,            NET_TITLE,                 DASH_TAG,     1,           -1 },
+	{ TERMINAL_CLASS,            DEV_TITLE,                 DASH_TAG,     1,           -1 },
+	{ TERMINAL_CLASS,            DEV_TITLE,                 DASH_TAG,     1,           -1 },
+	{ BROWSER_CLASS,             "Calendar",                ORG_TAG,      1,           -1 },
+	{ BROWSER_CLASS,             "Inbox",                   ORG_TAG,      1,           -1 },
+
+	/* Dynamic rules */
+	{ ZOOM_CLASS,                NULL,                      WORK_TAG,     1,           -1,        1 },
+	{ ZOOM_CLASS,                "Zoom Meeting",            WORK_TAG,     0,           -1,        1 },
+	{ ZOOM_CLASS,                "Zoom - Licensed Account", WORK_TAG,     0,           -1,        1 },
+	{ ZOOM_CLASS,                "Chat",                    WORK_TAG,     0,           -1,        1 },
+	{ ZOOM_CLASS,                "Participants",            WORK_TAG,     0,           -1,        1 },
+	{ ZOOM_CLASS,                "Settings",                WORK_TAG,     0,           -1,        1 },
 };
 
 #include "gaplessgrid.c"
@@ -50,60 +85,109 @@
 static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
 static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
 
-#include "layouts.c"
+enum Layouts {
+		Tile,
+		Monocle,
+		GaplessGrid,
+		Deck,
+		Floating,
+};
 static const Layout layouts[] = {
-	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
-	{ "###",      gaplessgrid },
-	{ "H[]",      deck },
+	               /* symbol     arrange function */
+	[Tile]        = { "[]=",      tile },    /* first entry is default */
+	[Monocle]     = { "[M]",      monocle },
+	[GaplessGrid] = { "###",      gaplessgrid },
+	[Deck]        = { "H[]",      deck },
+	[Floating]    = { "><>",      NULL },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define ALTKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
-	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY,                       KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ALTKEY,                KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+	{ MODKEY|ALTKEY|ShiftMask,      KEY,      toggletag,      {.ui = 1 << TAG} },
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *lockcmd[]    = { "slock", NULL };
+static const char *xrandrcmd[]  = { "xrandr", "--auto", NULL };
+static const char *dmenucmd[]   = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_norm_bg, "-nf", col_norm_fg, "-sb", col_sel_bg, "-sf", col_sel_fg, NULL };
+static const char *scratchcmd[] = { "alacritty", "-t", SCRATCH_TITLE, NULL };
+static const char *browsercmd[] = { "firefox", "https://duckduckgo.com", NULL };
+static const char *procscmd[]   = { "alacritty", "-t", PROCS_TITLE, "-o", "window.dimensions.columns=80", "-o", "window.dimensions.lines=30", "-e", "htop", NULL };
+static const char *filescmd[]   = { "alacritty", "-t", FILES_TITLE, "-o", "window.dimensions.columns=80", "-o", "window.dimensions.lines=30", "-e", "ranger", NULL };
+static const char *termcmd[]    = { "alacritty", NULL };
+static const char *editorcmd[]  = { "alacritty", "-t", EDITOR_TITLE, "-e", "kake", NULL };
 
 #include "focusurgent.c"
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
+	/* Basic tasks */
+	{ MODKEY,                       XK_q,      spawn,          {.v = lockcmd } },
+	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
+	{ MODKEY|ALTKEY,                XK_q,      quit,           {0} },
+
+	/* Spawn */
+	{ MODKEY|ALTKEY,                XK_j,      spawn,          {.v = browsercmd } },
+	{ MODKEY|ALTKEY,                XK_k,      spawn,          {.v = scratchcmd } },
+	{ MODKEY|ALTKEY,                XK_l,      spawn,          {.v = termcmd } },
+	{ MODKEY|ALTKEY,                XK_u,      spawn,          {.v = editorcmd } },
+	{ MODKEY|ALTKEY,                XK_i,      spawn,          {.v = filescmd } },
+	{ MODKEY|ALTKEY,                XK_p,      spawn,          {.v = procscmd } },
+	{ MODKEY|ALTKEY,                XK_e,      spawn,          {.v = xrandrcmd } },
+
+	/* Layout manipulation */
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY,                       XK_c,      incnmaster,     {.i = +1 } },
+	{ MODKEY,                       XK_x,      incnmaster,     {.i = -1 } },
+	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
+	{ MODKEY|ShiftMask,             XK_h,      setmfact,       {.f = +0.05} },
+	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[GaplessGrid]} },
+	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[Tile]} },
+	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[Monocle]} },
+	{ MODKEY,                       XK_n,      setlayout,      {.v = &layouts[Deck]} },
+	{ MODKEY,                       XK_v,      setlayout,      {.v = &layouts[Floating]} },
+
+	/* Focus manipulation */
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[3]} },
-	{ MODKEY,                       XK_c,      setlayout,      {.v = &layouts[4]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
+	{ MODKEY,                       XK_l,      zoom,           {0} },
+	{ MODKEY,                       XK_e,      swapfocus,      {0} },
+	{ MODKEY,                       XK_f,      togglefollow,   {0} },
+	{ MODKEY,                       XK_equal,  setlayout,      {.v = &layouts[Tile]} },
+	{ MODKEY,                       XK_equal,  winview,        {0} },
+	{ MODKEY,                       XK_u,      focusurgent,    {0} },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
+
+	/* Window Manipulation */
+	{ MODKEY|ShiftMask,             XK_w,      killclient,     {0} },
+	{ MODKEY|ShiftMask,             XK_v,      togglefloating, {0} },
+	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_j,      pushdown,       {0} },
+	{ MODKEY|ShiftMask,             XK_k,      pushup,         {0} },
+
+	/* Left hand mode */
+	{ MODKEY,              XK_d,      focusstack,     {.i = +1 } },
+	{ MODKEY,              XK_s,      focusstack,     {.i = -1 } },
+	{ MODKEY,              XK_a,      zoom,           {0} },
+	{ MODKEY|ShiftMask,    XK_d,      pushdown,       {0} },
+	{ MODKEY|ShiftMask,    XK_s,      pushup,         {0} },
+	{ MODKEY,              XK_minus,  view,           {0} },
+
+	/* Tags and views */
+	{ MODKEY|ALTKEY,                XK_0,      view,           {.ui = 0 } },
+	{ MODKEY,                       XK_0,      view,           {.ui = MAIN_TAGS } },
+	{ MODKEY,                       XK_0,      setlayout,      {.v = &layouts[GaplessGrid]} },
+	{ MODKEY,                       XK_Tab,    view,           {0} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -113,25 +197,39 @@
 	TAGKEYS(                        XK_7,                      6)
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
-	{ MODKEY,                       XK_o,      winview,        {0} },
-	{ MODKEY,                       XK_u,      focusurgent,    {0} },
 };
 
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static const Button buttons[] = {
 	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {.v = &layouts[Tile]} },
+	{ ClkLtSymbol,          MODKEY,         Button1,        setlayout,      {.v = &layouts[Deck]} },
+	{ ClkLtSymbol,          0,              Button2,        setlayout,      {.v = &layouts[Monocle]} },
+	{ ClkLtSymbol,          MODKEY,         Button2,        setlayout,      {.v = &layouts[GaplessGrid]} },
+
+	{ ClkWinTitle,          0,              Button1,        focusstack,     {.i = +1} },
+	{ ClkWinTitle,          ShiftMask,      Button1,        focusstack,     {.i = -1} },
+	{ ClkWinTitle,          MODKEY,         Button1,        setmfact,       {.f = -0.05} },
+	{ ClkWinTitle,          MODKEY,         Button2,        setmfact,       {.f = +0.05} },
 	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkWinTitle,          0,              Button3,        pushdown,       {0} },
+	{ ClkWinTitle,          ShiftMask,      Button3,        pushup,         {0} },
+
+	{ ClkStatusText,        0,              Button1,        togglefollow,   {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = lockcmd} },
+	{ ClkStatusText,        0,              Button3,        killclient,     {0} },
+	{ ClkStatusText,        MODKEY,         Button1,        spawn,          {.v = dmenucmd} },
+	{ ClkStatusText,        MODKEY,         Button2,        spawn,          {.v = scratchcmd} },
+	{ ClkStatusText,        MODKEY,         Button3,        spawn,          {.v = browsercmd} },
+
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        resizemouse,    {0} },
+
+	{ ClkTagBar,            0,              Button1,        toggleview,     {0} },
+	{ ClkTagBar,            0,              Button2,        view,           {0} },
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+	{ ClkTagBar,            MODKEY,         Button2,        toggletag,      {0} },
 };
 
